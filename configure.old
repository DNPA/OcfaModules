#!/usr/bin/perl

#  The Open Computer Forensics Architecture moduleset.
#  Copyright (C) 2003..2006 KLPD  <ocfa@dnpa.nl>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

print "NOTE !!!\n"; 
print "This is an experimental configure script, use at your own risk\n";
open(MAKEINFO,">configure.makeinfo");
$uname=lc(`uname`);
chomp($uname);
$libtool="libtool";
if ($uname eq "linux") {
  print "Linux\nSetting DLINUX flag\n";
  print MAKEINFO "GCCFLAGS += -DLINUX\n";
} elsif ($uname eq "sunos") {
  print "Solaris\nSetting flags for big endiannes";
  print MAKEINFO "GCCFLAGS += -DBIG_ENDIAN=1 -DBYTE_ORDER=1\n";
  print "Seting /usr/sfw/include as aditional path to look for crypt inc dir\n";
  print MAKEINFO "INCCRYPTDIR=-I/usr/sfw/include\n";
  print "Seting as aditional path to look for crypt libs\n";
  print MAKEINFO "LIBCRYPTDIR=-L/usr/sfw/lib\n";
} elsif ($uname eq "osx") {
  print "OS X\nSeting glibtool\n";
  $libtool="glibtool";
} else {
  print "WARNING: Unknown OS\n";
}
print MAKEINFO "LIBTOOL=$libtool\n";
#Dont think this hurts anything
print MAKEINFO "GCCFLAGS += -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE\n";
if ((-e "/usr/include/iconv.h") && (-e "/usr/local/include/iconv.h")) {
  print "!! WARNING !! : Two versions of iconv.h found, possible bad configuration\n";
  print "                you may need to rename /usr/local/include/iconv.h in order to\n";
  print "                prefent it from being used\n";
}
open(IH,"/usr/include/iconv.h") ||open(IH,"/usr/local/include/iconv.h") || die "Unable to open /usr/include/iconv.h for parsing\n";
$consticonv=0;
while(<IH>) {
  if (/size_t.*const/) {
    $consticonv=1;
  }
}
close(IH);
if ($consticonv) {
  print "iconv buffers are set as const\n";
  print MAKEINFO "GCCFLAGS += -DCONST_ICONV_INBUF\n";
} else {
  print "default (non const) iconv buffers\n";
}
$needlibiconv=1;
$lbs="";
opendir(LIB,"/lib")|| die "Can not read the /lib dir";
while($file=readdir(LIB)) {
  if ($file =~ /^libc.so/) {
     open(OBJDUMP,"objdump -T /lib/$file|")|| die "Unable to open /lib/$file with objdump\n";
     while(<OBJDUMP>) {
        if (/\siconv$/) {
           $needlibiconv=0;
	}
     }
  }
}
$foundiconv=0;
foreach $libdir ("/usr/lib","/usr/local/lib","/usr/lib64","/lib64/") {
  if (opendir(LIB,$libdir)){
  while($file=readdir(LIB)) {
    if (file =~ /^libiconv/) {
       $foundiconv=1;
    }
  }
  }
}
if ($neediconv) {
  unless ($foundiconv) {
     print "ERROR: no iconv found in libc and no libiconv found\n";
  }
} else {
  if ($foundiconv) {
    print "!! WARNING !!: iconv is found in libc but you also have libiconv installed\n";
    print "               you may need to manualy edit your configure.makeinfo or revert\n";
    print "               to defining or uncommenting a custom makinfo file in OS.makeinfo.\n"; 
  }
}
closedir(LIB);
if ($needlibiconv) {
  print MAKEINFO "LICONV_IF_NEEDED=-liconv\n";
  print "iconv library is required\n";
} else {
  print "iconv is part of libc\n";
}
foreach $dir ("/usr/include/pgsql","/usr/local/pgsql/include","/usr/include/postgresql") {
  if (-d $dir) {
     print "Adding $dir to includes\n";
     print MAKEINFO "INCPQDIR=-I$dir\n";
  }
}
foreach $dir ("/usr/local/pgsql/lib") {
  if (-d $dir) {
     print "Adding $dir as path for qp libraries\n";
     print MAKEINFO "LIBPQDIR=-L$dir\n";
  }
}
$boostinc="";
foreach $incdir ("/usr/include","/usr/local/include") {
  opendir(INCDIR,$incdir);
  @files=readdir(INCDIR);
  closedir(INCDIR);
  foreach $subdir (@files) {
    if (-f "${incdir}/${subdir}/boost/regex.hpp") {
       if ($boostinc) {
          print "ERR: double instalation of boost ${incdir}/$subdir $boostinc\n";
       } else {
         $boostinc="${incdir}/$subdir";
       }
    }
  }
}
unless ($boostinc) {
  print "ERROR: No boost/regex.hpp header found for boost regular expressions lib\n";
  $configok=0;
  $boostinc=".";
} else {
  print "boost regex files located at $boostinc\n";
}
$aceinc="";
foreach $incdir ("/usr/include","/usr/local/include",$ENV{"ACE_ROOT"}) {
  opendir(INCDIR,$incdir);
  @files=readdir(INCDIR);
  closedir(INCDIR);
  foreach $subdir (@files) {
    if (-f "${incdir}/${subdir}/ACE.h") {
       if ($aceinc) {
          print "ERR: double instalation of boost ${incdir}/$subdir $boostinc\n";
       } else {
         $aceinc="${incdir}/$subdir";
       }
    }
  }
}
unless ($aceinc) {
  print "ERROR: No ace/ACE.h header found for ACE communication framework lib\n";
  $configok=0;
  $aceinc=".";
} else {
  print "ACE library located at $aceinc\n";
}
print MAKEINFO "BOOSTINCDIR=$boostinc\n";
#FIXME !!!
print MAKEINFO "ACEINCDIR=$aceinc\n";
close(MAKEINFO);
open(TARGETS,"targets.conf_in") || die "Can not open targets.conf_in for reading";
open(MAKEFILTMPL,"Makefile.tmpl") || die "Can not open Makefile.tmpl for reading";
open(MAKEFILE,">Makefile")|| die "Can not open Makefile for writing";
print MAKEFILE "###############################################################################\n";
print MAKEFILE "#Do not edit this Makefile manualy, it is generated by the configure script    #\n";
print MAKEFILE "#from targets.conf_in and Makefile.tmpl. If you want to add a new module please#\n";
print MAKEFILE "#add it to targets.conf_in and add the binaries.hpp from this dir in your      #\n";
print MAKEFILE "#source files where apropriate in order to use the proper version of your      #\n";
print MAKEFILE "#required binary or library.                                                   #\n";
print MAKEFILE "################################################################################\n";
open(INC,">binaries.hpp") || die "Can not open binaries.hpp for writing";
open(PINC,">binaries.conf") || die "Can not open binaries.ph for writing";
print INC "#ifndef BINARIES_HPP\n";
print INC "#define BINARIES_HPP\n";
print MAKEFILE "SUBTARGETS=";
while(<TARGETS>) {
   chomp;
   ($target,$binname,$constname)=split(/\s+/,$_);
   if (($constname)&&($binname)) {
      $build=0;
      $binpath="";
      foreach $prefix ("/bin/","/sbin/","/usr/bin/","/usr/sbin/","/usr/local/bin/","/usr/local/sbin/","/usr/lib/","/usr/local/lib/") {
        if (-f "${prefix}$binname") {
           $binpath="${prefix}$binname";
	}
      }
      if ($binpath) {
         $build=1;
	 print INC "#define $constname \"$binpath\"\n";
	 print PINC "$constname\t$binpath\n"; 
      }
   } else {
      $build=1;
   }
   if ($build) {
      print MAKEFILE "$target ";
   } else {
      print STDERR "WARNING: $binname not found, $target will not get build\n";
   }
}
foreach $module ("Date::Parse","DB_File","File::Basename","Mail::Address",
                 "Mail::Box::Mbox","Mail::Header","Mail::Internet",
                 "MIME::Parser","MIME::Words","Spreadsheet::ParseExcel",
                 "Text::Iconv") {
  eval "use $module;\n";
  if ($@) {
     print "ERROR: $module perl module not installed\n";
     $configok=0;
  }
}


close(TARGETS);
print MAKEFILE "\n";
print INC "#endif\n";
close(INC);
close(PINC);
while(<MAKEFILTMPL>) {
   print MAKEFILE "$_";
}
close(MAKEFILE);
close(MAKEFILTMPL);
